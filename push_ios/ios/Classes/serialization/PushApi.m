// Autogenerated from Pigeon (v1.0.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "PushApi.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface PURemoteMessage ()
+ (PURemoteMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface PUNotification ()
+ (PUNotification *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface PUUNNotificationSettings ()
+ (PUUNNotificationSettings *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation PURemoteMessage
+ (PURemoteMessage *)fromMap:(NSDictionary *)dict {
  PURemoteMessage *result = [[PURemoteMessage alloc] init];
  result.notification = [PUNotification fromMap:dict[@"notification"]];
  if ((NSNull *)result.notification == [NSNull null]) {
    result.notification = nil;
  }
  result.data = dict[@"data"];
  if ((NSNull *)result.data == [NSNull null]) {
    result.data = nil;
  }
  result.isNotificationNull = dict[@"isNotificationNull"];
  if ((NSNull *)result.isNotificationNull == [NSNull null]) {
    result.isNotificationNull = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.notification ? [self.notification toMap] : [NSNull null]), @"notification", (self.data ? self.data : [NSNull null]), @"data", (self.isNotificationNull ? self.isNotificationNull : [NSNull null]), @"isNotificationNull", nil];
}
@end

@implementation PUNotification
+ (PUNotification *)fromMap:(NSDictionary *)dict {
  PUNotification *result = [[PUNotification alloc] init];
  result.title = dict[@"title"];
  if ((NSNull *)result.title == [NSNull null]) {
    result.title = nil;
  }
  result.body = dict[@"body"];
  if ((NSNull *)result.body == [NSNull null]) {
    result.body = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.title ? self.title : [NSNull null]), @"title", (self.body ? self.body : [NSNull null]), @"body", nil];
}
@end

@implementation PUUNNotificationSettings
+ (PUUNNotificationSettings *)fromMap:(NSDictionary *)dict {
  PUUNNotificationSettings *result = [[PUUNNotificationSettings alloc] init];
  result.authorizationStatus = [dict[@"authorizationStatus"] integerValue];
  result.soundSetting = [dict[@"soundSetting"] integerValue];
  result.badgeSetting = [dict[@"badgeSetting"] integerValue];
  result.alertSetting = [dict[@"alertSetting"] integerValue];
  result.notificationCenterSetting = [dict[@"notificationCenterSetting"] integerValue];
  result.lockScreenSetting = [dict[@"lockScreenSetting"] integerValue];
  result.carPlaySetting = [dict[@"carPlaySetting"] integerValue];
  result.alertStyle = [dict[@"alertStyle"] integerValue];
  result.showPreviewsSetting = [dict[@"showPreviewsSetting"] integerValue];
  result.criticalAlertSetting = [dict[@"criticalAlertSetting"] integerValue];
  result.providesAppNotificationSettings = dict[@"providesAppNotificationSettings"];
  if ((NSNull *)result.providesAppNotificationSettings == [NSNull null]) {
    result.providesAppNotificationSettings = nil;
  }
  result.announcementSetting = [dict[@"announcementSetting"] integerValue];
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:@(self.authorizationStatus), @"authorizationStatus", @(self.soundSetting), @"soundSetting", @(self.badgeSetting), @"badgeSetting", @(self.alertSetting), @"alertSetting", @(self.notificationCenterSetting), @"notificationCenterSetting", @(self.lockScreenSetting), @"lockScreenSetting", @(self.carPlaySetting), @"carPlaySetting", @(self.alertStyle), @"alertStyle", @(self.showPreviewsSetting), @"showPreviewsSetting", @(self.criticalAlertSetting), @"criticalAlertSetting", (self.providesAppNotificationSettings ? self.providesAppNotificationSettings : [NSNull null]), @"providesAppNotificationSettings", @(self.announcementSetting), @"announcementSetting", nil];
}
@end

@interface PUPushHostApiCodecReader : FlutterStandardReader
@end
@implementation PUPushHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [PUNotification fromMap:[self readValue]];
    
    case 129:     
      return [PURemoteMessage fromMap:[self readValue]];
    
    case 130:     
      return [PUUNNotificationSettings fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface PUPushHostApiCodecWriter : FlutterStandardWriter
@end
@implementation PUPushHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[PUNotification class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PURemoteMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PUUNNotificationSettings class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface PUPushHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PUPushHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PUPushHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PUPushHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PUPushHostApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    PUPushHostApiCodecReaderWriter *readerWriter = [[PUPushHostApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void PUPushHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PUPushHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PushHostApi.notificationTapLaunchedTerminatedApp"
        binaryMessenger:binaryMessenger
        codec:PUPushHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(notificationTapLaunchedTerminatedAppWithError:)], @"PUPushHostApi api (%@) doesn't respond to @selector(notificationTapLaunchedTerminatedAppWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api notificationTapLaunchedTerminatedAppWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PushHostApi.getNotificationTapWhichLaunchedTerminatedApp"
        binaryMessenger:binaryMessenger
        codec:PUPushHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getNotificationTapWhichLaunchedTerminatedAppWithError:)], @"PUPushHostApi api (%@) doesn't respond to @selector(getNotificationTapWhichLaunchedTerminatedAppWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSDictionary<NSString *, id> *output = [api getNotificationTapWhichLaunchedTerminatedAppWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PushHostApi.getToken"
        binaryMessenger:binaryMessenger
        codec:PUPushHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTokenWithCompletion:)], @"PUPushHostApi api (%@) doesn't respond to @selector(getTokenWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getTokenWithCompletion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PushHostApi.backgroundFlutterApplicationReady"
        binaryMessenger:binaryMessenger
        codec:PUPushHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(backgroundFlutterApplicationReadyWithError:)], @"PUPushHostApi api (%@) doesn't respond to @selector(backgroundFlutterApplicationReadyWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api backgroundFlutterApplicationReadyWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PushHostApi.onListenToOnNewToken"
        binaryMessenger:binaryMessenger
        codec:PUPushHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onListenToOnNewTokenWithError:)], @"PUPushHostApi api (%@) doesn't respond to @selector(onListenToOnNewTokenWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api onListenToOnNewTokenWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PushHostApi.onCancelToOnNewToken"
        binaryMessenger:binaryMessenger
        codec:PUPushHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onCancelToOnNewTokenWithError:)], @"PUPushHostApi api (%@) doesn't respond to @selector(onCancelToOnNewTokenWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api onCancelToOnNewTokenWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PushHostApi.requestPermission"
        binaryMessenger:binaryMessenger
        codec:PUPushHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestPermissionBadge:sound:alert:carPlay:criticalAlert:provisional:providesAppNotificationSettings:announcement:completion:)], @"PUPushHostApi api (%@) doesn't respond to @selector(requestPermissionBadge:sound:alert:carPlay:criticalAlert:provisional:providesAppNotificationSettings:announcement:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_badge = args[0];
        NSNumber *arg_sound = args[1];
        NSNumber *arg_alert = args[2];
        NSNumber *arg_carPlay = args[3];
        NSNumber *arg_criticalAlert = args[4];
        NSNumber *arg_provisional = args[5];
        NSNumber *arg_providesAppNotificationSettings = args[6];
        NSNumber *arg_announcement = args[7];
        [api requestPermissionBadge:arg_badge sound:arg_sound alert:arg_alert carPlay:arg_carPlay criticalAlert:arg_criticalAlert provisional:arg_provisional providesAppNotificationSettings:arg_providesAppNotificationSettings announcement:arg_announcement completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PushHostApi.getNotificationSettings"
        binaryMessenger:binaryMessenger
        codec:PUPushHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getNotificationSettingsWithCompletion:)], @"PUPushHostApi api (%@) doesn't respond to @selector(getNotificationSettingsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getNotificationSettingsWithCompletion:^(PUUNNotificationSettings *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface PUPushFlutterApiCodecReader : FlutterStandardReader
@end
@implementation PUPushFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [PUNotification fromMap:[self readValue]];
    
    case 129:     
      return [PURemoteMessage fromMap:[self readValue]];
    
    case 130:     
      return [PUUNNotificationSettings fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface PUPushFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation PUPushFlutterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[PUNotification class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PURemoteMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PUUNNotificationSettings class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface PUPushFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PUPushFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PUPushFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PUPushFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PUPushFlutterApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    PUPushFlutterApiCodecReaderWriter *readerWriter = [[PUPushFlutterApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface PUPushFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation PUPushFlutterApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)onMessageMessage:(PURemoteMessage *)arg_message completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.PushFlutterApi.onMessage"
      binaryMessenger:self.binaryMessenger
      codec:PUPushFlutterApiGetCodec()];
  [channel sendMessage:@[arg_message] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onBackgroundMessageMessage:(PURemoteMessage *)arg_message completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.PushFlutterApi.onBackgroundMessage"
      binaryMessenger:self.binaryMessenger
      codec:PUPushFlutterApiGetCodec()];
  [channel sendMessage:@[arg_message] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onNotificationTapData:(NSDictionary<NSString *, id> *)arg_data completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.PushFlutterApi.onNotificationTap"
      binaryMessenger:self.binaryMessenger
      codec:PUPushFlutterApiGetCodec()];
  [channel sendMessage:@[arg_data] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onNewTokenToken:(NSString *)arg_token completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.PushFlutterApi.onNewToken"
      binaryMessenger:self.binaryMessenger
      codec:PUPushFlutterApiGetCodec()];
  [channel sendMessage:@[arg_token] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onOpenNotificationSettingsWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.PushFlutterApi.onOpenNotificationSettings"
      binaryMessenger:self.binaryMessenger
      codec:PUPushFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)showNotificationInForegroundMessage:(nullable PURemoteMessage *)arg_message completion:(void(^)(NSNumber *, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.PushFlutterApi.showNotificationInForeground"
      binaryMessenger:self.binaryMessenger
      codec:PUPushFlutterApiGetCodec()];
  [channel sendMessage:@[arg_message] reply:^(id reply) {
    NSNumber *output = reply;
    completion(output, nil);
  }];
}
@end
